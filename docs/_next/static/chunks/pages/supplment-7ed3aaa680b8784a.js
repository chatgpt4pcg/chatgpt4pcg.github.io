(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[296],{73:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/supplment",function(){return n(3599)}])},798:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(5855),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("h1",{className:i().header,children:t})}},8050:function(e,t,n){"use strict";n.d(t,{Z:function(){return h}});var o=n(1527);n(959);var r=n(7318),i=n.n(r);function a(){return(0,o.jsx)("footer",{className:i().footer,children:'"Standing on the shoulders of giants"'})}var s=n(5946),l=n.n(s);function h(e){let{children:t}=e;return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("main",{className:l().layout,children:[t,(0,o.jsx)(a,{})]})})}},9140:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(4305),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("h2",{className:i().pageSubHeader,children:t})}},6534:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(8281),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("p",{className:i().paragraph,children:t})}},4648:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(7161),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("section",{className:i().section,children:t})}},4088:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(218),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("h2",{className:i().sectionHeader,children:t})}},5557:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var o=n(1527);n(959);var r=n(2122),i=n.n(r);function a(e){let{children:t}=e;return(0,o.jsx)("h3",{className:i().subSectionHeader,children:t})}},3599:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return b}});var o=n(1527),r=n(3670),i=n.n(r),a=n(798),s=n(8050),l=n(9140),h=n(6534),c=n(7993),u=n(4648),d=n(4088),p=n(5557);function b(){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i(),{children:[(0,o.jsx)("title",{children:"The 1st ChatGPT4PCG Competition: Character-like Level Generation for Science Birds - Supplementary Material"}),(0,o.jsx)("meta",{name:"description",content:"The ChatGPT4PCG Competition invites participants to use ChatGPT to generate stable levels for Science Birds resembling English characters. Participants must submit a prompt and instructions, and the generated levels will undergo testing for stability and similarity using an OCR model, offering a chance to showcase prompt engineering skills and push the boundaries of natural language processing and procedural content generation."}),(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,o.jsxs)(s.Z,{children:[(0,o.jsx)(l.Z,{children:"The 1st ChatGPT4PCG Competition"}),(0,o.jsx)(a.Z,{children:"Character-like Level Generation for Science Birds"}),(0,o.jsxs)(u.Z,{children:[(0,o.jsx)(d.Z,{children:"Improved Prompts"}),(0,o.jsx)(h.Z,{children:"Please see their performance on our paper."}),(0,o.jsx)(p.Z,{children:"V1"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:f}),(0,o.jsx)(p.Z,{children:"V2"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:m}),(0,o.jsx)(p.Z,{children:"V3"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:g}),(0,o.jsx)(p.Z,{children:"V4"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:y}),(0,o.jsx)(p.Z,{children:"V4"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:y}),(0,o.jsx)(p.Z,{children:"V5"}),(0,o.jsx)(c.Z,{language:"PlainText",theme:"Base16Darcula",copy:!0,copyBtnTheme:"Dark",children:w})]})]})]})}let f="Use `ab_drop()` function to generate a stable structure that looks like the <OBJECT>—the goal—and meets all the hard constraints. Dropping position and order are crucial, and they must be determined using techniques in the block-stacking problem.\n\n1. Role\nYou are a player of the Tetris game who aims to generate a structure that meets the goal while satisfying all the hard constraints.\n\n2. Definitions\nSlots: The map's width is equally partitioned into W slots where W = 20, with slots 0 and 19 being the most left and right, respectively.\nLayers: The map's height is equally partitioned into H layers where H = 16, with layers 0 and 15 being the bottom and top layers, respectively.\nBase: The bottom of the map, i.e., layer 0.\nMap Initialization:\n# initialize the structure as an empty WxH grid\nstructure = [[' ']*W for _ in range(H)]\n\n3. Environment\nThere are three block types as follows:\nb11, a square block whose width is 1 unit and height is 1 unit\nb31, a horizontal block whose width is 3 units and height is 1 unit\nb13, a vertical block whose width is 1 unit and height is 3 units\n\n4. Tool\nUse the following function to vertically drop a block from layer H such that its center is at slot y and drop earlier blocks representing more bottom parts of the structure.\nab_drop(x, y), \nwhere x is a block type, and y is the slot number from 0 to W-1 where the block center is aligned.  After vertically falling down, the block will end up at either the layer on top of the base or a previously dropped block. This function is defined as follows:\ndef ab_drop(x, y):\n    # x is the block type, y is the slot number from 0 to W-1 where the block center is aligned\n    \n    # initialize the drop position at the top of the map\n    drop_pos = (H-1, y)\n    \n    # drop the block from the top and move it down until it lands on the base or another block\n    while drop_pos[0] > 0:\n        drop_pos = (drop_pos[0]-1, y)\n        if structure[drop_pos[0]+1][drop_pos[1]] != ' ':\n            break\n    \n    # place the block on the structure\n    structure[drop_pos[0]][drop_pos[1]] = x\n\n5. Constraints:\nThe relevant constraints are given in the following.\n\n5.1 No boundary intrusion: This is a soft constraint that should be met if possible. Namely, blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.\n---",m="Use `ab_drop()` function to generate a stable structure that looks like the <OBJECT>—the goal—and meets all the hard constraints. Dropping position and order are crucial, and they must be determined using techniques in the block-stacking problem.\n\n1. Role\nYou are a player of the Tetris game who aims to generate a structure that meets the goal while satisfying all the hard constraints.\n\n2. Definitions\nSlots: The map's width is equally partitioned into W slots where W = 20, with slots 0 and 19 being the most left and right, respectively.\nLayers: The map's height is equally partitioned into H layers where H = 16, with layers 0 and 15 being the bottom and top layers, respectively.\nBase: The bottom of the map, i.e., layer 0.\n\n3. Environment\nThere are three block types as follows:\nb11, a square block whose width is 1 unit and height is 1 unit\nb31, a horizontal block whose width is 3 units and height is 1 unit\nb13, a vertical block whose width is 1 unit and height is 3 units\n\n4. Tool\nUse the following function to vertically drop a block from layer H such that its center is at slot y and drop earlier blocks representing more bottom parts of the structure.\nab_drop(x, y), \nwhere x is a block type, and y is the slot number from 0 to W-1 where the block center is aligned.  After vertically falling down, the block will end up at either the layer on top of the base or a previously dropped block.\n\n5. Constraints:\nThe relevant constraints are given in the following.\n5.1 Stability: This is a hard constraint that must be met. Because of gravity, as in the block-stacking problem, a block must be dropped at a proper slot to ensure that the current structure and the resulting structure are stable and do not collapse. Poor weight distribution caused by incorrect placement can lead to structural collapse.\n\n5.2 No boundary intrusion: This is a soft constraint that should be met if possible. Namely, blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.\n---",g="Use `ab_drop()` function to generate a stable structure that looks like the <OBJECT>—the goal—and meets all the hard constraints. Dropping position and order are crucial, and they must be determined using techniques in the block-stacking problem.\n\n1. Role\nYou are a player who aims to generate a structure that meets the goal while satisfying all the hard constraints.\n\n2. Definitions\nSlots: The map's width is equally partitioned into W slots where W = 20, with slots 0 and 19 being the most left and right, respectively.\nLayers: The map's height is equally partitioned into H layers where H = 16, with layers 0 and 15 being the bottom and top layers, respectively.\nBase: The bottom of the map, i.e., layer 0.\nMap Initialization:\n# initialize the structure as an empty WxH grid\nstructure = [[' ']*W for _ in range(H)]\n\n3. Environment\nThere are three block types as follows:\nb11, a square block whose width is 1 unit and height is 1 unit\nb31, a horizontal block whose width is 3 units and height is 1 unit\nb13, a vertical block whose width is 1 unit and height is 3 units\n\n4. Tool\nUse the following function to vertically drop a block from layer H such that its center is at slot y and drop earlier blocks representing more bottom parts of the structure.\nab_drop(x, y), \nwhere x is a block type, and y is the slot number from 0 to W-1 where the block center is aligned.  After vertically falling down, the block will end up at either the layer on top of the base or a previously dropped block. This function is defined as follows:\ndef ab_drop(x, y):\n    # x is the block type, y is the slot number from 0 to W-1 where the block center is aligned\n    \n    # initialize the drop position at the top of the map\n    drop_pos = (H-1, y)\n    \n    # drop the block from the top and move it down until it lands on the base or another block\n    while drop_pos[0] > 0:\n        drop_pos = (drop_pos[0]-1, y)\n        if structure[drop_pos[0]+1][drop_pos[1]] != ' ':\n            break\n    \n    # place the block on the structure\n    structure[drop_pos[0]][drop_pos[1]] = x\n\n5. Constraints:\nThe relevant constraints are given in the following.\n5.1 Stability: This is a hard constraint that must be met. Because of gravity, as in the block-stacking problem, a block must be dropped at a proper slot to ensure that the current structure and the resulting structure are stable and do not collapse. Poor weight distribution caused by incorrect placement can lead to structural collapse.\n\n5.2 No boundary intrusion: This is a soft constraint that should be met if possible. Namely, blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.\n---",y="Use `ab_drop()` function to generate a stable structure that looks like the <OBJECT>—the goal—and meets all the hard constraints. Dropping position and order are crucial.\n\n1. Role\nYou are a player of the Tetris game who aims to generate a structure that meets the goal while satisfying all the hard constraints.\n\n2. Definitions\nSlots: The map's width is equally partitioned into W slots where W = 20, with slots 0 and 19 being the most left and right, respectively.\nLayers: The map's height is equally partitioned into H layers where H = 16, with layers 0 and 15 being the bottom and top layers, respectively.\nBase: The bottom of the map, i.e., layer 0.\nMap Initialization:\n# initialize the structure as an empty WxH grid\nstructure = [[' ']*W for _ in range(H)]\n\n3. Environment\nThere are three block types as follows:\nb11, a square block whose width is 1 unit and height is 1 unit\nb31, a horizontal block whose width is 3 units and height is 1 unit\nb13, a vertical block whose width is 1 unit and height is 3 units\n\n4. Tool\nUse the following function to vertically drop a block from layer H such that its center is at slot y and drop earlier blocks representing more bottom parts of the structure.\nab_drop(x, y), \nwhere x is a block type, and y is the slot number from 0 to W-1 where the block center is aligned.  After vertically falling down, the block will end up at either the layer on top of the base or a previously dropped block. This function is defined as follows:\ndef ab_drop(x, y):\n    # x is the block type, y is the slot number from 0 to W-1 where the block center is aligned\n    \n    # initialize the drop position at the top of the map\n    drop_pos = (H-1, y)\n    \n    # drop the block from the top and move it down until it lands on the base or another block\n    while drop_pos[0] > 0:\n        drop_pos = (drop_pos[0]-1, y)\n        if structure[drop_pos[0]+1][drop_pos[1]] != ' ':\n            break\n    \n    # place the block on the structure\n    structure[drop_pos[0]][drop_pos[1]] = x\n\n5. Constraints:\nThe relevant constraints are given in the following.\n5.1 Stability: This is a hard constraint that must be met. Because of gravity, a block must be dropped at a proper slot to ensure that the current structure and the resulting structure are stable and do not collapse. Poor weight distribution caused by incorrect placement can lead to structural collapse.\n\n5.2 No boundary intrusion: This is a soft constraint that should be met if possible. Namely, blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.\n---",w="Use `ab_drop()` function to generate a stable structure that looks like the <OBJECT>—the goal—and meets all the hard constraints. Dropping position and order are crucial, and they must be determined using techniques in the block-stacking problem.\n\n1. Role\nYou are a player of the Tetris game who aims to generate a structure that meets the goal while satisfying all the hard constraints.\n\n2. Definitions\nSlots: The map's width is equally partitioned into W slots where W = 20, with slots 0 and 19 being the most left and right, respectively.\nLayers: The map's height is equally partitioned into H layers where H = 16, with layers 0 and 15 being the bottom and top layers, respectively.\nBase: The bottom of the map, i.e., layer 0.\nMap Initialization:\n# initialize the structure as an empty WxH grid\nstructure = [[' ']*W for _ in range(H)]\n\n3. Environment\nThere are three block types as follows:\nb11, a square block whose width is 1 unit and height is 1 unit\nb31, a horizontal block whose width is 3 units and height is 1 unit\nb13, a vertical block whose width is 1 unit and height is 3 units\n\n4. Tool\nUse the following function to vertically drop a block from layer H such that its center is at slot y and drop earlier blocks representing more bottom parts of the structure.\nab_drop(x, y), \nwhere x is a block type, and y is the slot number from 0 to W-1 where the block center is aligned.  After vertically falling down, the block will end up at either the layer on top of the base or a previously dropped block. This function is defined as follows:\ndef ab_drop(x, y):\n    # x is the block type, y is the slot number from 0 to W-1 where the block center is aligned\n    \n    # initialize the drop position at the top of the map\n    drop_pos = (H-1, y)\n    \n    # drop the block from the top and move it down until it lands on the base or another block\n    while drop_pos[0] > 0:\n        drop_pos = (drop_pos[0]-1, y)\n        if structure[drop_pos[0]+1][drop_pos[1]] != ' ':\n            break\n    \n    # place the block on the structure\n    structure[drop_pos[0]][drop_pos[1]] = x\n\n5. Constraints:\nThe relevant constraints are given in the following.\n5.1 Stability: This is a hard constraint that must be met. Because of gravity, as in the block-stacking problem, a block must be dropped at a proper slot to ensure that the current structure and the resulting structure are stable and do not collapse. Poor weight distribution caused by incorrect placement can lead to structural collapse.\n\n5.2 No boundary intrusion: This is a soft constraint that should be met if possible. Namely, blocks should not intrude on the boundary of the map. In other words, the area of intrusion regions should be zero.\n---"},7318:function(e){e.exports={footer:"Footer_footer__1IwEk"}},5855:function(e){e.exports={header:"PageHeader_header__dx9xv"}},5946:function(e){e.exports={layout:"PageLayout_layout__arqmj"}},4305:function(e){e.exports={pageSubHeader:"PageSubHeader_pageSubHeader__kGaWg"}},8281:function(e){e.exports={paragraph:"Paragraph_paragraph__zpRpR"}},7161:function(e){e.exports={section:"Section_section__8c_zV"}},218:function(e){e.exports={sectionHeader:"SectionHeader_sectionHeader__ntehe"}},2122:function(e){e.exports={subSectionHeader:"SectionSubHeader_subSectionHeader__7aSL4"}},3670:function(e,t,n){e.exports=n(4369)}},function(e){e.O(0,[676,903,774,888,179],function(){return e(e.s=73)}),_N_E=e.O()}]);